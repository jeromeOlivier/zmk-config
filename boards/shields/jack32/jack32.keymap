#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define ALF 0
#define NUM 1
#define NAV 2
#define FUN 3

/ {
    behaviors {
        
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_tilde {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <0>;
            bindings = <&kp TILDE>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <0>;
            bindings = <&kp MINUS>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <0>;
            bindings = <&kp PLUS>;
        };

        combo_double_quote {
            timeout-ms = <50>;
            key-positions = <6 7>;
            layers = <0>;
            bindings = <&kp DQT>;
        };

        combo_backslash {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <0>;
            bindings = <&kp BSLH>;
        };

        combo_grave {
            timeout-ms = <50>;
            key-positions = <10 11>;
            layers = <0>;
            bindings = <&kp GRAVE>;
        };

        combo_underscore {
            timeout-ms = <50>;
            key-positions = <11 12>;
            layers = <0>;
            bindings = <&kp UNDER>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <12 13>;
            layers = <0>;
            bindings = <&kp EQUAL>;
        };

        combo_single_quote {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <0>;
            bindings = <&kp SQT>;
        };

        combo_pipe {
            timeout-ms = <50>;
            key-positions = <17 18>;
            layers = <0>;
            bindings = <&kp PIPE>;
        };

        combo_less_than {
            timeout-ms = <50>;
            key-positions = <21 22>;
            layers = <0>;
            bindings = <&kp LT>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <22 23>;
            layers = <0>;
            bindings = <&kp TAB>;
        };

        combo_space {
            timeout-ms = <50>;
            key-positions = <26 27>;
            layers = <0>;
            bindings = <&kp SPACE>;
        };

        combo_comma {
            timeout-ms = <50>;
            key-positions = <26 27>;
            layers = <1>;
            bindings = <&kp COMMA>;
        };

        combo_dot {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <1>;
            bindings = <&kp DOT>;
        };

        combo_greater_than {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <0>;
            bindings = <&kp GT>;
        };

        combo_left_bracket {
            timeout-ms = <50>;
            key-positions = <23 10>;
            layers = <0>;
            bindings = <&kp LBKT>;
        };

        combo_left_brace {
            timeout-ms = <50>;
            key-positions = <23 11>;
            layers = <0>;
            bindings = <&kp LBRC>;
        };

        combo_left_parenthesis {
            timeout-ms = <50>;
            key-positions = <23 12>;
            layers = <0>;
            bindings = <&kp LPAR>;
        };

        combo_right_parenthesis {
            timeout-ms = <50>;
            key-positions = <26 17>;
            layers = <0>;
            bindings = <&kp RPAR>;
        };

        combo_right_brace {
            timeout-ms = <50>;
            key-positions = <26 18>;
            layers = <0>;
            bindings = <&kp RBRC>;
        };

        combo_right_bracket {
            timeout-ms = <50>;
            key-positions = <26 19>;
            layers = <0>;
            bindings = <&kp RBKT>;
        };

        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <04 05>;
            layers = <2>;
            bindings = <&bootloader>;
        }
    };

    keymap {
        compatible = "zmk,keymap";

        ALF { bindings = <
                &kp Q       &kp W       &kp F       &kp P       &kp B       &kp J       &kp L       &kp U       &kp Y       &kp SEMI
                &ht LCTRL A &ht LALT R  &ht LCMD S  &ht LSHFT T &kp G       &kp M       &ht RSHFT N &ht RCMD E  &ht RALT I  &ht RCTRL O
                &kp Z       &kp X       &kp C       &lt FUN D   &kp V       &kp K       &kp H       &kp COMMA   &kp DOT     &kp SLASH
                                                                &mo NUM     &lt NAV SPACE
            >;
        };

        NUM { bindings = <
                &kp ESC     &none       &none       &none       &none       &none       &kp N1      &kp N2      &kp N3      &kp BSPC
                &kp LCTRL   &kp LALT    &kp LCMD    &kp LSHFT   &none       &none       &kp N4      &kp N5      &kp N6      &kp N0
                &none       &none       &none       &none       &none       &none       &kp N7      &kp N8      &kp N9      &kp DEL
                                                                &trans      &kp RET
            >;
        };

        NAV { bindings = <
                &kp ESC     &none       &kp UP      &none       &none       &none       &none       &none       &none       &kp BSPC
                &none       &kp LEFT    &kp DOWN    &kp RIGHT   &none       &none       &kp RSHFT   &kp RCMD    &kp RALT    &kp RCTRL
                &none       &none       &none       &none       &none       &none       &none       &none       &none       &none
                                                                &kp CAPS    &trans
            >;
        };

        FUN { bindings = <
                &none       &none       &none       &none       &none       &none       &kp F1      &kp F2      &kp F3      &kp F4
                &kp LCTRL   &kp LALT    &kp LCMD    &kp LSHFT   &none       &none       &kp F5      &kp F6      &kp F7      &kp F8
                &none       &none       &none       &trans      &none       &none       &kp F9      &kp F10     &kp F11     &kp F12
                                                                &kp TAB     &kp SPC
            >;
        };
    };
};
